' Gambas class file

''' State storage and non-UI business logic (time tracking, state tracking, etc..)

'' Is the user currently experiencing an interuption?
Public paused As Boolean

'' Total number of Pomodoro sessions completed.
Public total As Integer

'' Time that the pomodoro session started OR time that last interuption ended, whichever came later.
Private pomStartTime As Date

'' Storage area for temporary value- seconds since `pomStartTime`
Private elapsedSeconds As Integer

'' When a user is interupted, the current pom session time is "stashed" here so it can be resumed later.
Private stashedSeconds As Integer

'' 25 minutes, expressed in seconds.
Private goalTime As Integer

Public Const ONE_POM As Integer = 1500 ' 25 minutes
Public Const ONE_BREAK As Integer = 300 ' 5 minutes

'' Triggered when a break or pomodoro session finishes.
Event Completion()

'' Stash the seconds elapsed since start time. Reset `mins` and `sec` members.
Private Sub stashTime()
  stashedSeconds = elapsedSeconds
  elapsedSeconds = 0
End

'' Stash progress and set `paused` flag to `True`
Public Sub pause()
  stashTime()
  paused = True
End

Private Sub resetStartTime()
  pomStartTime = Now()
End

'' Completely reset the current pomodoro session (including time stash)
Private Sub newPomSession()
  elapsedSeconds = 0
  stashedSeconds = 0
  resetStartTime()
End

'' Pause and reset session
Public Sub resetPom()
  pause()
  newPomSession()
End

Public Sub _new()
  resetPom()
  goalTime = ONE_POM
  total = 0
End

'' Calculates number of *full* minutes for a given number of seconds.
'' Example: 72 seconds is one minute.
Private Function calculateMinutes(seconds As Integer) As Integer
  Return seconds \ 60
End

'' Calculates remainder seconds when converting a quantity of seconds to minutes
'' Example: calculateSeconds(62) '=> 2
Private Function calculateSeconds(seconds As Integer) As Integer
  Return seconds - (calculateMinutes(seconds) * 60)
End

'' Called by timer event. Updates elapsed seconds, increments `total` sessions
'' completed (if possible), emits the `completion` event (if possible), and
'' finally, pauses the session after completion. Yes, this function
'' does too much
Private Function bumpTimer()
  elapsedSeconds = DateDiff(pomStartTime, Now(), gb.Second)
  If elapsedSeconds >= goalTime
    If goalTime == ONE_POM ' There are cleaner ways to do this.
      total += 1
    End If
    Raise Completion()
    pause()
  End If
End

'' Display the current pomodoro's time in the format "mm:ss"
Public Function mmss() As String
  Dim mins As Integer
  Dim sec As Integer
  If Not paused
    bumpTimer()
    mins = calculateMinutes(elapsedSeconds + stashedSeconds)
    sec = calculateSeconds(elapsedSeconds + stashedSeconds)
    Return Format(mins, "00") & ":" & Format(sec, "00")
  Else
    Return "--:--"
  End If
End

Public Sub unpause()
  resetStartTime()
  paused = False
End

'' Begins a new pomodoro session.
Public Sub startPom()
  unpause()
  newPomSession()
End

Public Sub startBreak()
  goalTime = ONE_BREAK
  startPom()
End

Public Sub stopBreak()
  goalTime = ONE_POM
  resetPom()
End

