' Gambas class file

'' Is the user currently experiencing an interuption?
Public paused As Boolean

'' Total number of Pomodoro sessions completed.
Public total As Integer

'' Time that the pomodoro session started OR time that last interuption ended, whichever came later.
Private pomStartTime As Date

'' Storage area for temporary value- seconds since `pomStartTime`
Private elapsedSeconds As Integer

'' When a user is interupted, the current pom session time is "stashed" here so it can be resumed later.
Private stashedSeconds As Integer

'' 25 minutes, expressed in seconds.
Public Const ONE_POMODORO As Integer = 1500

Event Completion()

'' Stash the seconds elapsed since start time. Reset `mins` and `sec` members.
Private Sub stashTime()
  stashedSeconds = elapsedSeconds
  elapsedSeconds = 0
End

'' Stash progress and set `paused` flag to `True`
Public Sub pause()
  stashTime()
  paused = True
End

Private Sub resetStartTime()
  pomStartTime = Now()
End

'' Completely reset the current pomodoro session (including time stash)
Private Sub newPomSession()
  elapsedSeconds = 0
  stashedSeconds = 0
  resetStartTime()
End

'' Pause and reset session
Public Sub resetPom()
  pause()
  newPomSession()
End

Public Sub _new()
  resetPom()
  total = 0
End

'' Calculates number of minutes that were completed prior to last interuption.
Private Function calculateMinutes(seconds As Integer) As Integer
  Return seconds \ 60
End

'' Calculates seconds (but not minutes) prior to interuption.
Private Function calculateSeconds(seconds As Integer) As Integer
  Return seconds - (calculateMinutes(seconds) * 60)
End

Private Function bumpTimer()
  elapsedSeconds = DateDiff(pomStartTime, Now(), gb.Second)
  If elapsedSeconds >= ONE_POMODORO
    total += 1
    Raise Completion()
    pause()
  End If
End

'' Display the current pomodoro's time in the format "mm:ss"
Public Function mmss() As String
  Dim mins As Integer
  Dim sec As Integer
  If Not paused
    bumpTimer()
    mins = calculateMinutes(elapsedSeconds + stashedSeconds)
    sec = calculateSeconds(elapsedSeconds + stashedSeconds)
    Return Format(mins, "00") & ":" & Format(sec, "00")
  Else
    Return "--:--"
  End If
End

Public Sub unpause()
  resetStartTime()
  paused = False
End

'' Begins a new pomodoro session.
Public Sub startPom()
  unpause()
  newPomSession()
End
